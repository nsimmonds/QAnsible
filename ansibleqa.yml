- name: Provision instances
  hosts: localhost
  vars:
    slaves: 5
    jmx_file: dummy.jmx
  connection: local
  gather_facts: False
  tasks:
    - name: Provision master
      ec2:
        key_name: ansibleqa
        group: ansibleqa
        instance_type: m3.large
        image: ami-d05e75b8
        region: us-east-1
        vpc_subnet_id: subnet-fc39df8b
        # assign_public_ip: yes
        wait: true
        exact_count: 1
        count_tag:
          Name: jmmaster
        instance_tags:
          Name: jmmaster
      register: jmm

    - name: Provision slaves
      ec2:
        key_name: ansibleqa
        group: ansibleqa
        instance_type: m3.medium
        image: ami-d05e75b8
        region: us-east-1
        vpc_subnet_id: subnet-fc39df8b
        assign_public_ip: yes
        wait: true
        exact_count: "{{slaves}}"
        count_tag:
          Name: jmslave
        instance_tags:
          Name: jmslave
      register: jms

    - name: Add master server to appropriate groups
      add_host: hostname={{ item.private_ip }} groups=jmqamaster
      # add_host: hostname={{ item.private_ip }} groups=jmeter
      with_items: jmm.instances

    - name: Wipe ids file
      file:
        dest: ./instanceids
        state: absent

    - name: Write master instance to file
      lineinfile:
        create: yes
        dest: ./instanceids
        line: "{{ item.id }}"
      with_items: jmm.instances

    - name: Write slaves
      lineinfile:
        create: yes
        dest: ./instanceids
        line: "{{ item.id }}"
      with_items: jms.instances

    - name: Add slave servers to appropriate groups
      add_host: hostname={{ item.private_ip }} groups=jmqaslaves
      # add_host: hostname={{ item.private_ip }} groups=jmeter
      with_items: jms.instances

    - name: Wait for ssh
      wait_for: host={{ item.private_ip }} port=22 timeout=600 state=started
      with_items: jms.instances

    - name: Wait for key to be added to ssh interface
      pause: seconds=30



- hosts: jmqamaster:jmqaslaves
  name: Configuration pass
  user: ubuntu
  sudo: yes
  gather_facts: false
  tasks:
    - name: turn off firewall
      ufw: state=disabled
    - name: Update cache
      apt: update_cache=yes upgrade=yes
    - name: Install jmeter
      apt: name=jmeter
    - name: Download standard plugins
      get_url:
        url: http://jmeter-plugins.org/downloads/file/JMeterPlugins-Standard-1.3.0.zip
        dest: /usr/share/jmeter
    - name: Download extras
      get_url:
        url: http://jmeter-plugins.org/downloads/file/JMeterPlugins-Extras-1.3.0.zip
        dest: /usr/share/jmeter
    - name: Unzip plugins
      unarchive:
        copy: no
        src: /usr/share/jmeter/JMeterPlugins-Standard-1.3.0.zip
        dest: /usr/share/jmeter
      unarchive:
        copy: no
        src: /usr/share/jmeter/JMeterPlugins-Extras-1.3.0.zip
        dest: /usr/share/jmeter

- name: create host list
  hosts: localhost
  connection: local
  tasks:
  - debug: msg="{{ item.private_ip }}"
    with_items: jms.instances
    register: output
    always_run: True
    changed_when: False
    run_once: True
    # delegate_to: jmqamaster
  # - set_fact: ips={{ output.results|map(attribute='msg')|join(',') }}

- name: Set master server
  hosts: jmqamaster
  user: ubuntu
  sudo: yes
  gather_facts: false
  tasks:
    - name: Push jmx file
      copy:
        src: "./dummy.jmx"
        dest: ~/
    - name: Run jmx file against remote servers
      command: "jmeter -n -t dummy.jmx -R{{ hostvars.localhost.output.results|map(attribute='msg')|join(',') }}"


# - name: Terminate instances
#   hosts: localhost
#   connection: local
#   tasks:
#     - name: terminate instance
#       ec2: state=absent instance_ids={{jms.id}} key_name=ansibleqa
#       ec2: state=absent instance_ids={{jmm.id}} key_name=ansibleqa
